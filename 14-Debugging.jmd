---
options:
      hold: true
---

# Debugging

## Grundlagen und einfache Fälle

Debugging bezeichnet die Suche und das Entfernen von Fehlern (sogenannten *bugs*) aus einem Programm.
Besonders bei sehr komplexer Software mit vielen verschachtelten Funktionen und unterschiedlichen Eingabewerten kann es schwierig sein, sich die Programmlogik für jeden Fall vorzustellen.
Daher gibt es in Julia Tools, die bei der Suche nach Fehlern helfen können.

Die einfachste Form des Debuggings funktioniert durch Hinzufügen von print-Befehlen.
Das Macro `@show` ist dafür besonders geeignet, da es neben dem Wert auch den Namen einer Variable ausgibt.

```julia; results="hidden"
a = 100.1
@show a
```

In der folgenden Funktion hat sich ein Fehler eingeschlichen.

```julia; results="hidden"
"Berechne x^n"
function bug_pow(x::Number,n::Int)
    x_pow = x
    for i in 1:n
        x_pow *= x
    end
    return x_pow
end
```

Eigentlich sollte die Funktion $x^n$ berechnen, die Ergebnisse stimmen allerdings nicht:

```julia
bug_pow(3.5,6), 3.5^6
```

Um den Fehler zu finden, kann ein print-Statement in der `for`-Schleife eingefügt werden, um `i` und `x_pow` auszugeben.

```julia; results="hidden"
"Berechne x^n"
function bug_show_pow(x::Number,n::Int)
    x_pow = x
    for i in 1:n
        @show i,x_pow
        x_pow *= x
    end
    return x_pow
end
```

Ein erneuter Aufruf der Funktion liefert folgende Ausgabe:
```julia; term=true
bug_show_pow(3.5,6)
```

Offensichtlich wird in der Schleife `x`, 6``×`` multipliziert, allerdings startet `x_pow` nicht mit 1, sondern mit `x`, weshalb gesamt $x^{n+1}$ ergibt.

Diese Methode des Debuggings funktioniert bei einfachen Fällen, hat aber den Nachteil, dass der Code verändert werden muss.
Julia bietet in Kombination mit [`Debugger.jl`](https://github.com/JuliaDebug/Debugger.jl)\footnote{<https://github.com/JuliaDebug/Debugger.jl>} und VS Code einen Debugger im klassischen Sinn, der eine wesentlich präzisere und effizientere Fehlersuche erlaubt.

## Das Debugger-Paket

Mit einem klassischen Debugger ist es möglich, die Ausführung des Quellcodes zu unterbrechen und schrittweise zu analysieren.
Dabei gibt es die Möglichkeit, sogenannte *Breakpoints* zu setzen, an welchen der Code unterbrochen werden soll.

Um die Funktion `bug_pow` mit dem Debugger zu analysieren, muss der Debugger-Modus über einen Klick auf den Debugknopf gestartet werden.
Über die Seitenleiste mit den Zeilennummern kann nun durch einen Klick ein Breakpoint gesetzt werden. Dadurch wird die Ausführung in der 5. Zeile angehalten.
Durch Klicken auf *Start Debugging* (Grüner Play-Pfeil im Debugger-Modus) startet der Debugger die Ausführung und stoppt beim ersten Breakpoint.
Mit diesem Prozedere wird ein neuer Julia Prozess gestartet, in dem der Code mit dem Debugger ausgeführt wird.
Alternativ, lässt sich der Debugger auch in der aktiven REPL mit den Macros `@run` und `@enter` starten.
Beispielsweise, führt der Aufruf `@run bug_pow(3.5,6)` die Funktion `bug_pow` mit dem Debugger aus.
Die Ausführung wird an gestetzten Breakpoints angehalten.
Im Vergleich dazu, stoppt der Debugger die Funktion `bug_pow` bei dem Aufruf `@enter bug_pow(3.5,6)` in der ersten Zeile der Funktion.

![Debugging starten in VS Code](../data/img/debugger-01.png)

Auf der linken Seite des Fensters werden nun die bis zum Breakpoint abgespeicherten Variablen aufgelistet.
Mit einem Blick darauf kann man erkennen, dass im ersten Schleifendurchgang `i == 1`, die Variable `x_pow` bereits einen Wert ungleich 1 hat. 

![Debugging in VS Code](../data/img/debugger-02.png)

Sobald das Debugging gestartet wurde, erscheint im oberen Bereich des Fensters eine Werkzeugleiste zur Steuerung der weiteren Vorgehensweise.

![Werkzeugleiste zur Steuerung des Debuggers](../data/img/debugger-03.png)

Von dem Breakpoint aus gibt es die folgenden Möglichkeiten zum Fortsetzen der Ausführung (von links nach rechts in der Werkzeugleiste):

- *Continue*: Lässt den Code bis zum nächsten Breakpoint weiterlaufen.
- *Step over*: Führt die aktuelle Zeile aus und wechselt zur nächsten.
- *Step into*: Springt in die erste Zeile der aktuellen Funktion.
- *Step out*: Springt aus der Funktion zurück in die nächst höhere Ebene. Funktioniert wie Continue wenn der Debugger in der obersten Ebene ist.
- *Restart*: Startet den Debugger neu.
- *Stop*: Beendet den Debugger.

## Aufgaben

### Finde den Fehler

Die folgende Funktion berechnet den größten gemeinsamer Teiler zweier Zahlen `a` und `b`.

```julia
function ggt(a::Int,b::Int)
    for teiler in min(a,b):-1:0
        if a%teiler == 0 && b%teiler == 0
            return teiler
        end
    end
    return 1
end
```

Julia hat mit der Funktion `gcd` bereits eine Implementierung dieser Aufgabe.
Damit lässt sich an 1000 zufälligen Zahlenkombinationen zwischen 1 und 1000 einfach zeigen, dass die Funktion `ggt` für viele Fälle das korrekte Ergebnis liefert:

```julia; term=true
a = rand(1:1000,1000); b = rand(1:1000,1000);
ggt.(a,b) == gcd.(a,b)
```

Für die folgenden Fälle stimmt das Ergebnis allerdings nicht.

```julia; term=true
ggt(10,0) == gcd(10,0)
ggt(0,10) == gcd(0,10)
ggt(-2304,288) == gcd(-2304,288)
```

Finde die Fehler mit dem Debugger und korrigiere die Funktion.


