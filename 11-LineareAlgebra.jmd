# Lineare Algebra

Neben der Unterstützung von multi-dimensionalen Arrays (Vektoren, Matrizen, Tensoren) bietet Julia auch eine Implementierung von nützlichen Funktionen der linearen Algebra.
Das Lineare-Algebra-Paket ist standardmäßig in Julia enthalten und kann wie alle anderen Pakete mit `using` geladen werden.

```{julia}
using LinearAlgebra
```

Details zu dem Paket sind unter [Standard Library/Linear Algebra](https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/) in der Dokumentation zu finden.

## Lineare Gleichungssysteme

Eine übliche Problemstellung der linearen Algebra ist das Lösen von Gleichungssystemen wie dem folgenden:

```math
   x - y = 22
```
```math
2x + 3y = 11
```
Um das System zu lösen, müssen zuerst die Koeffizientenmatrix und der Vektor auf der rechten Seite definiert werden.

```{julia;results="hidden"}
A = [1 -1
     2  3]
c = [22, 11]
```

Um Informationen über die Lösbarkeit des System zu erhalten, wird die Determinante mit `det` ermittelt.


```{julia}
det(A)
```

Offensichtlich hat das Gleichungssystem eine eindeutige Lösung. 
Im nächsten Schritt muss ``\mathbf{A}`` invertiert werden.

```{julia}
A_inv = inv(A)
```

Der Lösungsvektor ``\mathbf{b}`` ergibt sich dann zu:

```{julia}
b = A_inv*c
```

Die Kontrolle kann einfach durch Ausmultiplizieren erfolgen.

```{julia}
A*b
```

Da dieser Ablauf sehr häufig vorkommt und sich abhängig von ``\mathbf{A}`` gut optimieren lässt, bietet Julia mit dem `\`-Operator eine Kurzschreibweise, bei der das zusätzliche Invertieren entfällt.

```{julia}
A\c
```

## Vektorfunktionen

Das Lineare-Algebra-Paket beinhaltet auch Funktionen zur Berechnung des Skalarprodukts `dot` oder `·` (`\cdot`+`TAB`-Taste), des Kreuzprodukts `cross` oder `×` (`\times`+`TAB`-Taste) und der Länge `norm` von Vektoren.

```julia; term=true
[1,2,3] ⋅ [4,5,6]
[1,2,3] × [4,5,6]
norm([1,2,3])
```

## Aufgaben

### Lösbarkeit von linearen Gleichungssystemen

Es soll eine Funktion definiert werden, die `true` zurückgibt, falls ein lineares Gleichungssystem lösbar ist (nicht zwingend eindeutig), und `false` zurückgibt, falls das System nicht lösbar ist.

```julia; echo=false; results="hidden"
function lösbar(A,b)
    rank(A) == rank(hcat(A,b))
end
```

Beispiele:
```julia; term=true
lösbar([1 -1
        2  3],[22, 11])
lösbar([1 -1
        2  3
        9 -1],[22, 11, 3])
lösbar([1 3
        2  8
        3 11],[9, -3, 6])
lösbar([1 1
        2 2],[2, 3])
```

### Löse das Gleichungssystem 

Es soll das folgende Gleichungssystem in Matrixform gebracht und gelöst werden.

```math
   x - y + z = 22
```
```math
   2x + 3y = 11
```
```math
   10x-y/2+5z=0
```

Für die Kontrolle muss die allgemeine Form der Kontrollfunktion verwendet werden.
```julia; eval=false
@Aufgabe "10.3.2" begin
    # Code einfügen.
    # Hier, in der letzten Zeile, muss der Lösungsvektor berechnet werden (nicht return verwenden)
end
```

### Eigenwerte und Eigenvektoren

Mit den Funktion `eigvals` und `eigvecs` können Eigenwerte bzw. Eigenvektoren berechnet werden.
Es soll eine Funktion geschrieben werden, die aus Eigenwerten und Eigenvektoren, in dem Format wie sie von den beiden Funktionen für eine Matrix ausgegeben werden, wieder die Matrix rekonstruiert.
Die Funktion soll für eine beliebige Anzahl von Eigenwerten (auch komplexe Eigenwerte) funktionieren.
Tipps für die Lösung der Aufgabe sind in der Dokumentation unter [Standard Library/Linear Algebra](https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/) zu finden.

```julia; echo=false; results="hidden"
function rekonstruiere(λ,ϕ)
    ϕ*Diagonal(λ)*inv(ϕ)
end
```

Beispiele:
```julia; term=true
A = [1 -1 1; 2  3 0; 10 -0.5 5]; λ = eigvals(A); ϕ = eigvecs(A);
rekonstruiere(λ,ϕ)
```
### Winkel zwischen den Vektoren

Es soll eine Funktion definiert werden, die den Winkel in Radiant zwischen zwei Vektoren beliebiger Dimension berechnet.

```julia; echo=false; results="hidden"
function winkel(v1,v2)
    acos(v1⋅v2/(norm(v1)*norm(v2)))
end
```

Beispiele:
```julia; term=true
winkel([1,5],[3,7])
winkel([2,3,-1],[8,-1,2])
winkel([1,0,0],[1,0,0])
```
