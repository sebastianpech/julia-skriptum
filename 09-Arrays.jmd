# Arrays, Range, Tuple, Dict
Dieses Kapitel beinhaltet einige wichtige Typen in Julia, die mehrere Werte aufnehmen können.
Derartige Datentypen werden *Sammlungen* (englisch *collections*) genannt.
## Arrays
Wie ein *String* ist ein *Array* eine geordnete Abfolge von Werten.
Während ein String aus Werten vom Typ *Char* besteht, können Arrays Werte aller möglichen Typen enthalten.
Die Werte innerhalb eines Arrays heißen *Elemente*.

Arrays können auf verschiedenste Weisen erzeugt werden.
Alle Elemente getrennt durch ein Komma innerhalb von eckigen Klammer zu schreiben ist die einfachste Variante:
```julia;results="hidden"
primes = [2, 3, 5, 7, 11, 13]
baustoffe = ["Holz", "Beton", "Stahl"]
```

Die erste Zeile erzeugt ein Array aus sechs Int-Zahlen, die zweite Zeile erzeugt ein Array aus drei Strings.
Die Elemente eines Arrays müssen aber nicht vom gleichen Typ sein; sogar Arrays innerhalb von Arrays sind möglich:
```julia;results="hidden"
stahl = ["S235", 235.0, [10, 20]]
```
Mit `typeof()` kann der Typ eines Arrays abgefragt werden:
```julia; term=true
typeof(primes)
typeof(baustoffe)
typeof(stahl)
```
Innerhalb der geschwungenen Klammer steht dabei zuerst, von welchem Typ die Werte des Arrays sind, und an zweiter Stelle, welche Ordnung das Array hat.
Ein *leeres Array* hat keine Elemente und kann z.B. mit leeren, eckigen Klammern (`[]`) erzeugt werden.
Das so erzeugte leere Array ist dabei vom Typ `Array{Any,1}`.
Ein leeres Array mit Werten eines bestimmten Typs, wie z.B. `Float64`, kann mittels `Array{Float64,1}()` oder `Float64[]` erzeugt werden; mit der Schreibweise `Float64[]` können allerdings nur Arrays erster Ordnung erzeugt werden.
```julia; term=true
[]
Array{Float64,1}()
Float64[]
```

### Arrays sind veränderbar
Die Syntax für den Zugriff auf ein bestimmtes Element eines Arrays ist dieselbe wie beim Zugriff auf einen Character innerhalb eines Strings: das Array, direkt gefolgt von einer Int-Zahl als Index innerhalb eckiger Klammern.
```julia; term=true
baustoffe[2]
```

Wie bei Strings kann auch auf Teile eines Arrays zugegriffen werden:
```julia; term=true
primes[2:4]
primes[3:end]
```

Anders als Strings sind Arrays allerdings veränderbar.
Das heißt, einzelne Elemente oder Teile eines Arrays können durch den `=`-Operator neu zugewiesen werden.
Der zugewiesenen Datentyp muss mit dem Typen des Arrays übereinstimmen.
```julia; term=true
baustoffe[3] = "Ziegel"
baustoffe[2] = 2
print(baustoffe)
```

Folgendes Verhalten kann dabei möglicherweise zu Verwirrung führen:
```julia; term=true
a = [1, 4, 3];  # Array a erzeugen
b = a;  # Array a zu b zuweisen
b[2] = 2;  # Zweites Element von b ersetzen
print("a = $(a)")  # Auch a wurde verändert
print("b = $(b)")
```
Verändern eines Wertes im Array `b` verändert also auch den Array `a`.
Das liegt daran, dass der Ausdruck `b = a` den Array `a` **nicht** kopiert, sondern auf ihn verweist.
Zum Kopieren eines Arrays eignet sich die Funktion `copy()`.
```julia; term=true
a = [1, 4, 3];  # Array a erzeugen
b = copy(a);  # Kopie von a in b speichern
b[2] = 2;  # Zweiten Eintrag von b ersetzen
print("a = $(a)")  # a bleibt unverändert
print("b = $(b)")
```

### Funktionen der Array Library
`length` gibt die Anzahl der Elemente eines Arrays zurück.
Ein Array innerhalb eines Arrays ist dabei ein Element.
```julia; term=true
print(primes)
length(primes)
print(stahl)
length(stahl)
length(stahl[3])
```

`push!` fügt ein neues Element am Ende des Arrays ein:
```julia; term=true
fib = [1, 1, 2, 3, 5];
push!(fib, 8);
print(fib)
```

`append!` hängt ein Array am Ende des Arrays an:
```julia; term=true
append!(fib, [13, 21, 34]);
print(fib)
```

`insert!` fügt ein Element bei einem bestimmten Index in das Array ein:
```julia; term=true
countdown = [5, 4, 3, 1, 0];
insert!(countdown, 4, 2);  # Die Zahl 2 wird an vierter Stelle eingefügt
print(countdown)
```

`sort!` sortiert die Elemente eines Arrays vom niedrigsten zum höchsten Wert:
```julia; term=true
c = ['d', 'g', 'a', 'W', 'f'];
sort!(c);
print(c)
```

`sort` hingegen erzeugt eine **sortierte Kopie** des Arrays:
```julia; term=true
c1 = ['d', 'g', 'a', 'W', 'f'];
c2 = sort(c1);
print("c1 = $(c1)")
print("c2 = $(c2)")
```

Generell hat sich in Julia etabliert, dass Funktionen, die direkt ihr Argument verändern, mit `!` enden.

### Elemente löschen
Es gibt verschiedene Möglichkeiten, einzelne Elemente aus einem Array zu löschen.
`pop!` entfernt das letzte Element aus dem Array und gibt dieses Element zurück:
```julia; term=true
chars = ['a', 'b', 'c'];
pop!(chars)
print(chars)
```

Das erste Element eines Arrays kann mittels `popfirst!` entfernt werden:
```julia; term=true
chars = ['a', 'b', 'c'];
popfirst!(chars)
print(chars)
```

Ist der Index des zu entfernenden Elements bekannt, kann dieses mit `splice!` aus dem Array gelöscht werden:
```julia; term=true
chars = ['a', 'b', 'c'];
splice!(chars, 2)
print(chars)
```

Ähnlich funktioniert auch `deleteat!`.
Der Unterschied ist dabei, dass nicht das entfernte Element, sondern das Array zurückgegeben wird:
```julia; term=true
chars = ['a', 'b', 'c'];
deleteat!(chars,2)
print(chars)
```

### Strings und Arrays
Strings und Arrays sind in manchen Punkten sehr ähnlich.
Ein String ist eine Abfolge von Characters und da ein Array mit beliebigen Datentypen befüllt werden kann, ist ein Array aus Characters auch eine Abfolge von Characters.
Trotzdem sind beides verschiedene Typen mit unterschiedlichen Eigenschaften.
`collect` konvertiert einen String in ein Array von Characters:
```julia; term=true
a = collect("spam");
print(a)
```

Mittels `split` kann ein String entlang bestimmter Zeichen in mehrere Teile getrennt werden.
So können beispielsweise Sätze in einzelne Worte aufgeteilt werden:
```julia; term=true
s1 = split("Julia ist großartig")  # Standardmäßig wird bei jedem Leerzeichen getrennt
s2 = split("Stahl;Beton;Ziegel;Holz",';')  # Als zweites Argument kann das Trennzeichen festgelegt werden
```

`join` verbindet ein Array aus Strings zu einem einzelnen String:
```julia; term=true
s1 = split("julia ist großartig")
sort!(s1)
s2 = join(s1,' ')
```

### Arrays höherer Ordnung
In vielen numerischen Aufgaben sind Arrays zweiter oder höherer Ordnung hilfreich.
In Julia wird ein Array zweiter Ordnung auch als *Matrix* bezeichnet.
Die Eingabe erfolgt wie bei Arrays erster Ordnung in eckigen Klammern, allerdings werden die Elemente zeilenweise mit Leerzeichen zwischen den Elementen einer Zeile und Semikola zwischen den Zeilen eingegeben.
Alternativ kann auch ein Zeilenumbruch anstatt der Semikola eingefügt werden.
```julia; results="hidden"
a = [1 2; 3 4]
b = [4 2
     3 1]
```

Eine `m×n`-Matrix hat `m` Zeilen und `n` Spalten.
Mit der Syntax `matrix[m,n]` kann auf ein Element der Matrix zugegriffen werden.
Ebenso kann auf Teile der Matrix zugegriffen werden.
Ein Doppelpunkt `:` ohne Indizes bezeichnet dabei die gesamte Zeile oder Spalte.
```julia; term=true
m = rand(3,6)
m[2,3]  # Zweite Zeile, dritte Spalte
m[1:2,6]  # Erste und zweite Zeile, sechste Spalte
m[3,:]  # Dritte Zeile, alle Spalten
```

Die Funktion `rand` erzeugt Zufallszahlen in unterschiedlicher Art.
Ohne Argumente wird eine einzelne Zufahlszahl, gleichmäßig, aus dem Interval $[0,1)$ generiert.
Es können allerdings auch mehrere Int-Zahlen als Argumente übergeben werden, um ein Array mit Zufallszahlen zu erzeugen.
Dabei gibt die erste Zahl die Anzahl der Elemente in erster Ordnung, die zweite Zahl die Anzahl der Elemente in zweiter Ordnung, usw. an.
`rand(3, 2, 4)` erzeugt also ein `3×2×4`-Array dritter Ordnung, voller Zufallszahlen zwischen 0 und 1.
```julia; term=true
rand()
rand(2)
rand(2,2)
rand(3,2,4)
```

Mit `rand` können aber nicht nur Zufallszahlen zwischen `0` und `1` erzeugt werden.
Die zufällige Auswahl eines Elements aus einem `Array` ist ebenso möglich.
Nachdem an erster Stelle der Argumente das Array stehen muss, können wieder beliebig viele `Int`-Zahlen als Anzahl der Elemente je Ordnung übergeben werden.
```julia;term=true
a = ["Holz","Stahl","Ziegel","Beton"];
rand(a)
rand(a,3)
rand(a,2,3)
```

Die Funktion `zero` kann nicht nur auf Zahlen, sondern auch auf Arrays mit Zahlen angewendet werden.
In diesem Zusammenhang sind auch die Funktionen `one`, `ones` und `zeros` interessant.
Achtung: Bei `one` muss das Argument eine quadratische Matrix sein.
```julia;term=true
a = [1 2; 3 4]
zero(a)  # Erzeugt ein Array voller Nullen, gleich groß wie das Argument
one(a)  # Erzeugt eine Einheitsmatrix gleich groß wie das Argument
zeros(2,3)  # Erzeugt ein 2x3-Array voller Nullen
ones(3,2)  # Erzeugt ein 3x2-Array voller Einsen
```

`similar` erzeugt ein Array vom gleichen Datentyp wie das übergebene Argument.
```julia;term=true
a = [1 2; 3 4];
b = ["a" "b"; "c" "d"];
similar(a)
similar(b)
```

### Broadcasting
Viele Operationen in Julia können elementweise auf Arrays angewendet werden.
Diese Vorgehensweise wird auch *Broadcasting* genannt.
Dazu wird bei Operatoren wie `+` und `^` ein `.` vorangestellt oder bei Funktionen ein `.` hinter dem Funktionsnamen angehängt:
```julia; term=true
a = [1 2 3; 3 4 5]
a .^2
a .+ 4
b = ["Tom" "Jerry"; "Michael" "John"];
length.(b)
```

Durch Anwenden von Vergleichsoperatoren oder Funktionen die einen Wert vom Typ `Bool` zurückggeben, mittels *Broadcasting* auf alle Element eines Arrays, wird ein Bit-Array (Besteht nur aus `0` und `1`, für `false` und `true`) erzeugt.
Mittels eines solchen Arrays ist der Zugriff auf Teile eines anderen Arrays möglich. 
Dabei werden nur die Teile des Arrays ausgewählt, bei deren Position im Bit-Array der Wert `1` steht.

```julia; term=true
primes .>= 10
primes[primes .>= 10]
occursin.("o",b) # String beinhaltet ein o
b[occursin.("o",b)]
```

## Range
Eine `Range` ist eine Abfolge von `Int`-Zahlen.
Durch Angabe der ersten und letzten Zahl der Sequenz, getrennt durch einen Doppelpunkt, kann eine `Range` erstellt werden.
Dabei ist die Schrittweite standardmäßig mit `1` definiert.
Durch Angabe einer dritten `Int`-Zahl kann auch die Schrittweite festgelegt werden.
Die Schrittweite kann für eine absteigende `Range` auch negativ sein, dann muss allerdings der größere Wert an erster Stelle stehen.
```julia;term=true
1:10
0:2:10
10:-2:0  # Negative Schrittweiten erzeugen absteigende Ranges
```

`rand` kann auch auf eine `Range` angewendet werden.
```julia;term=true
rand(1:10)
print(sort(rand(1:45,6)))  # Die Lotto-Zahlen nächster Woche?
```

Eine `Range` kann vor allem für Schleifen hilfreich sein.
Mithilfe der Funktion `collect` können damit aber auch schnell Arrays erzeugt werden.
```julia;term=true
print(collect(1:5))
print(collect(6:-2:0))
```

Julia hat verschiedene Arten von Sammlungen implementiert.
Viele dieser Sammlungen können mithilfe von `collect` in Arrays umgewandelt werden.

`Range`s können auch dazu verwendet werden um auf Teile eines Arrays zuzugreifen.

```julia; term=true
primes[1:2:end]
primes[end:-1:1]
```

## Tuple
Der Datentyp `Tuple` ist sehr ähnlich zum Array erster Ordnung.
Der wichtigste Unterschied ist, dass `Tuple` nicht veränderbar sind.
Am einfachsten wird ein Tuple durch die Eingabe von mehreren durch Kommas getrennte Werte erzeugt.
Übersichtlicher ist es aber, die Werte mit runden Klammern zu umgeben:
```julia;term=true
t1 = 1, 2, 3, 4
t2 = ('a', 'b', 'c')
```

Wie beim Array können auch unterschiedliche Datentypen in ein Tuple geschrieben werden.
Die Datentypen werden dabei im Datentypen des Tuples geschrieben:
```julia; term=true
t = (1, 3.1415, "foo", ('c',))
typeof(t)
```

Tuple mit nur einem Element müssen mit einem Komma abgeschlossen werden.
Ein leeres Tuple kann mittels `tuple()` erzeugt werden.
```julia; term=true
t1 = ('!',)  # Tuple
c = ('!')  # Character
t2 = tuple()
```

Wie bei Arrays kann mittels eckiger Klammern auf einzelne oder mehrere Elemente eines Tuples zugegriffen werden.
Da ein Tuple allerdings nicht veränderbar ist, gibt Julia beim Versuch der Neudefinition eines Wertes einen *MethodError* zurück.
```julia;term=true
t = (2, 3, 5, 7, 11, 13, 17, 19)
print(t[3])
print(t[4:6])
print(t[5:end])
t[4] = 23
```

Manchmal ist es notwendig, ein `Tuple` in ein `Array` umzuwandeln, z.B. um Werte ändern zu können.
Mittels `collect` kann ein `Tuple` einfach in ein `Array` umgewandelt werden:
```julia;term=true
print(collect(("spam", "foo", "bar")))
```

## Dictionaries
Ein `Dict` (Abkürzung für *Dictionary*) ist ebenfalls sehr ähnlich zum Array erster Ordnung.
Während sich beim Array die Indizes auf Int-Zahlen beschränken, können die Indizes eines *Dictionaries* nahezu jeder Datentyp sein.
Die Indizes eines Dictionaries heißen *Keys* und die Werte werden *Values* genannt.
Jeder Wert ist dabei einem Key zugewiesen.
Mit einem Dictionary kann z.B. ein Wörterbuch erstellt werden, in dem jeder Key ein deutsches Wort ist, dem das passende spanische Wort zugeordnet ist.
Mit `Dict()` wird ein Dictionary erstellt:
```julia; term=true
de2sp = Dict("eins" => "uno", "zwei" => "dos", "drei" => "tres")
```
Ein weiterer wichtiger Unterschied zu Arrays ist, dass Dictionaries nicht geordnet sind.
Es kann daher sein, dass die Elemente nicht in der eingegebenen Reihenfolge angezeigt werden.

Die Syntax für die Eingabe von Key-Value-Paaren ist dabei folgende:
  - ein Key-Value-Paar besteht aus dem Key gefolgt von `=>` und dem zugehörigen Wert;
  - die einzelnen Einträge werden durch ein Komma getrennt.
Durch eckige Klammern und Eingabe eines Index kann auf die Werte zugegriffen werden.
Falls der eingegebene Index nicht im Dictionary vorhanden ist, gibt Julia einen *KeyError* zurück.
```julia; term=true
de2sp["zwei"]
de2sp["vier"]
```

Das sollte geändert werden.
Neue Indizes können auf folgende Weise hinzugefügt werden:
```julia; term=true
de2sp["vier"] = "cuatro"
print(de2sp)
```

Auf diese Weise können vorhandene Werte neu definiert werden.
Die Funktionen `keys` und `values` geben Sammlungen mit den Keys oder Values eines Dictionaries zurück.
```julia; term=true
print(keys(de2sp))
print(values(de2sp))
```

Diese Sammlungen haben die Typen `Base.KeySet` und `Base.ValueIterator`, auf die wir hier nicht genauer eingehen.
Es sei jedoch festgehalten, dass diese Sammlungen andere Eigenschaften als Arrays haben und daher manche Operationen damit nicht möglich sind.
`collect` bietet auch hier die Möglichkeit, diese Sammlungen in `Arrays` umzuwandeln:
```julia;term=true
print(collect(keys(de2sp)))
```

## Aufgaben
### Drei Arrays zusammenhängen
Schreibe eine Funktion `connect_three`, die drei Arrays als Argumente nimmt und diese Arrays zu einem Array zusammenfügt.
Die Funktion muss nur für Arrays mit gleichem Datentypen funktionieren (z.B. dreimal Array{String,1} oder dreimal Array{Any,1}).
```julia; results="hidden"; echo=false
function connect_three(a,b,c)
    return append!(append!(a,b),c)
end
```

Beispiele:
```julia;term=true
a = [1, 1, 2];
b = [3, 5];
c = [8, 13];
print(connect_three(a,b,c))
```

### Innere Werte eines Arrays
Schreibe eine Funktion `interior`, die ein Array als Argument nimmt und ein neues Array zurückgibt, das alle Werte bis auf den ersten und den letzten enthält.
Falls das Array weniger als drei Elemente hat, soll ein leeres Arary zurückgegeben werden.
Hinweis: Eine sehr einfache Lösung ohne if-Abfragen kann mittels Zugriff auf einen Bereich des Arrays formuliert werden.
```julia; results="hidden"; echo=false
function interior(a)
    return a[2:end-1]
end
```

Beispiele:
```julia;term=true
nums = [0,1,2,3,4];
res1 = interior(nums)
res2 = interior(res1)
res3 = interior(res2)
```

### Ist das Array sortiert?
Schreibe eine Funktion `is_sort`, die ein Array als Argument nimmt, überprüft, ob dieses Array sortiert ist, und dementsprechend `true` oder `false` zurückgibt.
```julia; results="hidden"; echo=false
function is_sort(a)
    return a == sort(a)
end
```

Beispiele:
```julia;term=true
unsorted_nums = [3,2,5,1];
sorted_nums = sort(unsorted_nums);
is_sort(unsorted_nums)
is_sort(sorted_nums)
```

### Anagram-Test
Zwei Wörter sind Anagramme, wenn die Buchstaben eines Wortes durch Umordnen das zweite Wort ergeben.
Schreibe eine Funktion `is_anagram`, die zwei Strings als Argumente nimmt, überprüft, ob diese Strings Anagramme sind, und dementsprechend `true` oder `false` zurückgibt.
Groß- und Kleinschreibung soll dabei nicht berücksichtigt werden (`Stein` ist gleichwertig zu `stein`).
```julia;results="hidden";echo=false
function is_anagram(s1, s2)
    return sort(collect(lowercase(s1))) == sort(collect(lowercase(s2)))
end
```

Beispiele:
```julia;term=true;
is_anagram("spam","eggs")
is_anagram("Stein","niest")
```

### N-tes Element eines Dict ausgeben
Da Dictionaries nicht geordnet sind, bietet Julia keine Möglichkeit auf das `n`-te Element eines Dictionaries zuzugreifen.
Schreibe eine Funktion `dict_index(d,n)`, die ein Dict `d` und eine Int-Zahl `n` als Argumente nimmt, das Dictionary nach den Keys sortiert und den `n`-ten Value in dieser Reihenfolge zurückgibt.
```julia; results="hidden"; echo=false
function dict_index(d, n)
    return d[sort(collect(keys(d)))[n]]
end
```

Beispiele:
```julia;term=true
d = Dict("a"=>1,"b"=>2, "c"=>3, "d"=>4)
dict_index(d, 2)
```

### Tuples zusammenfügen
Da Tuple nicht veränderlich sind, funktioniert das Zusammenfügen zweier Tuple standardmäßig nicht.
Schreibe eine Funktion `tuple_append`, die zwei Tuples als Argumente nimmt, das zweite an das erste anhängt und das zusammengefügte Tuple als Return Value zurückgibt.
```julia; results="hidden"; echo=false
function tuple_append(t1, t2)
    return Tuple(append!(collect(t1),collect(t2)))
end
```

Beispiele:
```julia;term=true
t1 = ('a','b')
t2 = ('c','d','e')
tuple_append(t1,t2)
```
