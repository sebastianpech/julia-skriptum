# Datentypen
Ein grundlegender Baustein von Programmen sind Werte (*values*), wie z.B. Zahlen oder Buchstaben.
Jeder Wert gehört zu einem bestimmten Datentypen.
Dieser Datentyp kann mit der Funktion `typeof()` abgefragt werden:
```julia; term=true
typeof(2)
typeof(42.0)
typeof("hello world")
typeof('c')
typeof(true)
```

## Characters und Strings
### Characters
Ein Wert vom Typ `Char` repräsentiert ein einzelnes Zeichen und ist von einfachen Anführungszeichen umgeben.
Dabei kann jedes verfügbare *Unicode*-Zeichen als `Char` verwendet werden:
```julia; term=true
'x'
'α'
typeof('x')
```


### Strings
Strings werden von doppelten Anführungszeichen umgeben.
```julia; term=true
"Das ist ein String"

typeof("19.0")
```
Ein `String` ist eine Aneinanderreihung von `Char`-Werten.
Über eckige Klammern kann auf jedes dieser Zeichen zugegriffen werden:
```julia; term=true
fruit = "banana"
third = fruit[3]
last = fruit[end]
secondlast = fruit[end-1]
```
Nachdem in der ersten Zeile der Variable `fruit` ein `String` zugewiesen wird, greifen die übrigen Zeilen auf diesen `String` zu und weisen jeweils ein Zeichen einer neuen Variablen zu.
Der Ausdruck in den eckigen Klammern heißt dabei *Index* und muss ein Integer sein.
Die Indexierung in Julia startet bei 1, die Variable `third` beinhaltet also das dritte Zeichen des Strings.
Für den Zugriff auf das letzte Zeichen kann der Index `end` verwendet werden.

Neben einzelnen Zeichen besteht auch die Möglichkeit, auf einen Teil des Strings zuzugreifen.
Dies erfolgt durch Eingabe des ersten und letzten Index des Teils, getrennt durch einen Doppelpunkt, `:`.
```julia; term=true
fruit[3:end]
```

Die Anzahl der Zeichen eines Strings kann mit der Funktion `length()` abgefragt werden:
```julia; term=true
length("julia")
```

Strings sind nicht veränderbar.
Austauschen eines Zeichens durch Zugriff auf einen bestimmten Index ist daher nicht möglich.
Julia gibt dann einen *Method-Error* aus.
```julia; term=true
s = "banana"
s[3:end] = "nane"
```
Mittels `replace()` kann allerdings eine Zeichenfolge im String durch eine neue Zeichenfolge ersetzt und in einer neuen Variable abgespeichert werden:
```julia; term=true
s_1 = replace(s,"nana"=>"nane")  # Ersetze im String s "nana" durch "nane"
s_2 = replace(s,'a'=>'u')  # Ersetze im String s 'a' durch 'u'
s  # Der String s bleibt unverändert
```
Das erste Argument der Funktion ist der zu verändernde String.
Das zweite Argument setzt sich zusammen aus dem String oder Character, der ersetzt werden soll, einem Pfeil bestehend aus `=` und `>` sowie dem String oder Character der, eingefügt werden soll.
Die ursprüngliche Variable `s` bleibt dabei unverändert.

Es gibt mehrere Möglichkeiten, Strings zusammenzusetzen.
Eine davon ist die Verwendung des `*`-Operators.
```julia; term=true
name = "Raphael"
"Der Name"*name*" hat "*string(length(name))*" Buchstaben."
```
Der `*`-Operator ist für `String` und `Int` nicht definiert, daher muss `length(name)` erst durch die Funktion `string()` in einen `String` konvertiert werden.
In dieser Form wird der Code schnell unübersichtlich, weshalb Julia die sogenannte \enquote{String-Interpolation} bietet.
Jeder Ausdruck in runden Klammern oder jeder Variablenname nach dem Symbol `$` wird ausgewertet und das Ergebnis in den String eingegliedert.
Diese Ausdrücke können nicht nur Werte und Variablen, sondern auch Funktionen und Operatoren enthalten.
```julia; term=true
"Der Name $name hat $(length(name)) Buchstaben."
```

Der `^`-Operator wiederholt einen String beliebig oft:
```julia; term=true
"stop"^5
```

Die Funktionen `uppercase` und `lowercase` wandeln alle Buchstaben eines Strings in Groß- oder Kleinbuchstaben um.
Beim Vergleichen von Strings unabhängig von Groß- und Kleinschreibung können diese Funktionen hilfreich sein.
```julia;term=true
lowercase("In diesem Satz stehen auch Grossbuchstaben.")
uppercase("gross- und kleinschreibung wird hier klein geschrieben.")
"Julia" == "julia"
lowercase("Julia") == lowercase("julia")
uppercase("Julia") == uppercase("julia")
```

### Special Characters und Escaping
In den meisten Programmiersprachen gibt es spezielle Zeichen für Tabulatorabstände oder Zeilenumbrüche.
Diese Zeichen werden mit einem Backslash (`\`) eingeleitet.
```julia;term=true
'\t'  # Tabulatorabstand
'\n'  # Zeilenumbruch
print("tabs\tabs")
print("Erste Zeile\nZweite Zeile")
```

Dementsprechend ist auch der Backslash ein speziell zu verwendendes Zeichen in Julia, das mit einem vorangehenden Backslash maskiert werden muss.
Dieses Maskieren nennt man auch *Escaping*.
Neben dem Backslash gibt es noch weitere spezielle Zeichen, die maskiert werden müssen.
Beispielsweise würde Julia hinter einem `$`-Zeichen einen auszuwertenden Ausdruck und bei jedem Anführungszeichen den Anfang oder das Ende eines Strings erwarten.
```julia;term=true
print("tabs\\tabs")
print("Julia ist jeden \$ Wert.")
print("Dieser Satz enthält \"Anführungszeichen\".")
print("""Dieser Satz enthält "Anführungszeichen".""")
```

Strings können auch mit drei Anführungszeichen geschrieben werden.
In diesem Fall müssen Anführungszeichen innerhalb des Strings nicht maskiert werden.

Weitere interessante Funktionen sind im Online-Buch [Think Julia](https://benlauwens.github.io/ThinkJulia.jl/latest/book.html#chap08)\footnote{[https://benlauwens.github.io/ThinkJulia.jl/latest/book.html#chap08](https://benlauwens.github.io/ThinkJulia.jl/latest/book.html\#chap08)} und in der Dokumentation unter [Manual/Strings](https://docs.julialang.org/en/v1/manual/strings/) erläutert.

## Zahlen
In Julia sind verschiedene Datentypen für Zahlen definiert.
Im Beispiel oben ist der ganzzahlige Wert `2` vom Typ `Int64` und `42.0` vom Typ `Float64`.
Diese beiden Datentypen werden für Zahlen am häufigsten verwendet.
Daneben bietet Julia allerdings noch die Typen `Complex` und `Rational` für komplexe und rationale Zahlen.
```julia; term=true
typeof(1.3+4im)
typeof(23//4)
```
Für Zahlen vom Typ `Int` und `Float` gibt es verschiedene Typen, die sich nach ihrer Anzahl an Bits im Speicher unterscheiden.
Die Zahl am Ende des Typs gibt genau diesen Wert an.
Neben den Typen `Int64` und `Float64` gibt es daher noch `Int8`, `Int16`, `Int32` und `Int128` sowie `Float16` und `Float32`.
Diese Zahlentypen benötigen zwar weniger Speicher (ausgenommen `Int128`), es ist aber zu beachten, dass diese Integer-Typen nur für Zahlen bis zu einer gewissen Größe funktionieren und die beiden Float-Typen weniger Kommastellen bereitstellen als `Float64`.
Eine Übersicht dazu bieten die Tabellen unter [Manual/Integers and Floating-Point Numbers](https://pkg.julialang.org/docs/julia/THl1k/1.1.1/manual/integers-and-floating-point-numbers.html) in der Julia-Dokumentation. 

Mithilfe der Operatoren `+`, `-`, `*` und `/` können Zahlen addiert, subtrahiert, multipliziert und dividiert werden:
```julia; term=true
17 + 2
23.0 - 4
1.0 * 19.0
38 / 2
```
Während der Datentyp des Ergebnisses einer Addition, Subtraktion und Multiplikation abhängig vom Datentyp der Eingangswerte ist, ergibt die Division zweier ganzzahliger Werte immer eine Float-Zahl.
Potenzen werden mit `^` eingegeben:
```julia; term=true
2^3
```

Die Reihenfolge der Operationen folgt dabei den üblichen mathematischen Regeln:
1. Klammern vor
2. Potenzen vor
3. Multiplikation und Division vor
4. Addition und Subtraktion.
Gleichrangige Operationen führt Julia immer der Reihe nach von links nach rechts aus.
Klammern bieten die Möglichkeit, den Code zu strukturieren und besser lesbar zu machen, auch wenn diese nicht immer notwendig sind:
```julia; term=true
d = 5;
A = d^2*π/4#OhneAbständeliestsichCodeschwer
A = (d^2 * π) / 4  # Abstände und Klammern verbessern die Lesbarkeit
```

Manchmal ist es notwendig, zu einer Variable eine Zahl zu addieren und das Ergebnis in der gleichen Variable zu speichern.
Für solche Fälle gibt es die Operatoren `+=`, `-=`, `*=`, `/=` und `^=`.
```julia;term=true
a = 1.0
a = a + 1
a += 1  # wie a = a + 1
a -= 1  # wie a = a - 1
a *= 2  # wie a = a * 2
a /= 2  # wie a = a / 2
a ^= 2  # wie a = a^2
```

Zahlen vom Typ `Float` sind für menschliche Anwender etwas eigenartig in der Verwendung, da sie wie Dezimalzahlen aussehen, es aber nicht sind.
Wir sind es gewohnt Zahlen zur Basis 10 auszudrücken.
Das bedeutet, dass ein Dezimalbruch (z.B. $0{,}1$) exakt dargestellt werden kann.
Verallgemeinert gesagt, lässt sich der Nenner eines Bruchs durch die Primfaktoren von 10 (2 und 5) ausdrücken, ist die Zahl exakt als Dezimalzahl abbildbar.
Ähnliches gilt für binäre Zahlen mit den Primfaktoren von 2 (2).
Diese Diskrepanz führt zu dem folgenden unerwarteten Ergebnis

```julia;term=true
0.1+0.2
```

Weder `0.1` noch `0.2` haben eine exakte Darstellung als binäre Gleichkommazahlen.
Bei der Addition wird dann der Rest der beim Überführen ins Binärsystem bleibt nicht berücksichtig und führt zu einer Abweichung vom Ergebnis, wenn die Addition im Dezimalsystem durchgeführt worden wäre.
Exakt lässt sich diese Operation mit dem Typ `Rational` oder einem zusätzlichen Paket wie z.B. `Decimals.jl` durchführen.
Diese, vereinfacht gesehen, Rundungsfehler, führen auch dazu, dass weder das Kommutativ noch das Distributivgesetz für `Float`-Zahlen Gültigkeit haben und bedingen, dass ekaxte Vergleiche mit `==` selten die erwünschte Aussage haben:

```julia;term=true
0.1+0.2 == 0.3
0.1+0.2 ≈ 0.3 # mit \approx
```

Die Funktionen `string()` und `parse()` konvertieren Zahlen in Strings und umgekehrt:
```julia; term=true
string(19.0)
parse(Int64,"17")
parse(Float64,"1.2345")
```

Wird `parse()` mit einem ungültigen String aufgerufen (z.B. `parse(Int,"foo")`) verursacht das einen Fehler.
Es gibt die Möglichkeit, anstelle von `parse()`, `tryparse()` zu verwenden. 
Die Funktion verursacht keinen Fehler, sondern gibt für einen nicht umwandelbaren String `nothing` zurück.

`float()` und `Int()` wandeln beliebige Zahlen in Float-Zahlen bzw. in ganzzahlige Werte um.
Bei Verwendung von `Int()` muss gewährleistet sein, dass die übergebene Zahl tatsächlich ganzzahlig ist, sonst meldet Julia einen `InexactError`.
`trunc` wandelt eine Float-Zahl direkt in ein Integer um und ignoriert dabei die Nachkommastellen.
```julia; term=true
float(3)
float(4//3)
Int(2.3)
Int(2.0)
Int(4//4)
trunc(3.99999)
trunc(-2.3)  # trunc rundet nicht ab!
```

Zum Runden von Zahlen eignen sich die Funktionen `round()`, `floor()` und `ceil()`.
```julia; term=true
round(1.47)
floor(1.47)
ceil(1.47)
```
Während erstere Funktion zur nächstliegenden ganzen Zahl rundet, ermöglichen die anderen beiden Funktionen Ab- und Aufrunden von Zahlen.
Die Anzahl der zu rundenden Stellen kann bei jeder dieser drei Funktionen über die zusätzlichen Argumente `digits` und `sigdigits` festgelegt werden.
```julia; term=true
round(345.123; digits=2)
round(345.123; sigdigits=2)
round(0.00345123; digits=4)
round(0.00345123; sigdigits=4)
```
Das Keyword `digits` definiert dabei die Anzahl der Nachkommastellen, `sigdigits` legt die Anzahl der signifikanten Stellen fest.
Einfacher gesagt: `digits` beginnt ab dem Komma zu zählen, während `sigdigits` ab der ersten Ziffer ungleich 0 zählt.

Zwei weitere interessante Operatoren sind die ganzzahlige Division `÷`\footnote{`÷` wird durch Eingabe von `\div` und Drücken der TAB-Taste erstellt.} (*floor division*) und der Modulo-Operator, `%`.
```julia; term=true
7÷3
7%3
```
`÷` führt eine Division durch und rundet das Ergebnis auf die nächste ganze Zahl ab.
Der Modulus-Operator gibt den Rest einer Division aus.
Damit kann z.B. leicht überprüft werden, ob eine Zahl durch eine andere Zahl teilbar ist.

Julia hat standardmäßig mathematische Funktionen wie `sin`, `cos`, `log`, `abs` und viele mehr inkludiert.
```julia;term=true
sin(π/6)  # Die Argumente von sin, cos und tan müssen in rad angegeben werden
cos(π/6)
tan(π/6)
log(100)  # log ist standardmäßig der natürliche Logarithmus
log(10,100)  # Mit zwei Argumenten ist das erste die Basis
log10(100)  # log10 ist der Logarithmus mit Basis 10
abs(-19.0)
```
`sin(π/6)` sollte exakt `0.5` ergeben.
Da der Datentyp von `π/6`, `Float64` ist, ist keine exakte Darstellung der eigentlich irrationalen Zahl möglich.
Bei Float-Zahlen wird nur eine begrenze Anzahl von Dezimalstellen gespeichert, wodurch hier ein vernachlässigbarer Fehler entsteht.

Eine weitere interessante Funktion ist `zero`.
Sie nimmt eine Zahl als Argument und gibt `0` im gleichen Datentyp zurück.
Besonders im Zusammenhang mit Typenstabilität (siehe Abschnitt Kontrollstruktur) kann die Funktion hilfreich sein.
```julia;term=true
zero(19)
zero(19.0)
zero(38//2)
zero(19.0+3im)
```

## Booleans
Eine Wert vom Typ `Bool` kann entweder `true` oder `false` annehmen.
Diesen Datentypen kann man sich wie eine Zahl vorstellen, die entweder `0` (im Falle von `false`) oder `1` (im Falle von `true`) ist.
Verschiedene Operationen in Julia geben eine Zahl vom Typ `Bool` zurück, wie z.B. das Vergleichen zweier Zahlen:
```julia; term=true
x = 13; y = 17.0;
x == y  # Ist x gleich y?
x != y  # Ist x ungleich y?
x ≠ y  # \ne TAB (wie !=)
x > y  # Ist x größer als y?
x < y  # Ist x kleiner als y?
x >= y  # Ist x größer oder gleich y?
x ≥ y  # \ge TAB (wie >=)
x <= y  # Ist x kleiner oder gleich y?
x ≤ y  # \le TAB (wie <=)
```

Mit den oben gezeigten Operatoren können auch zwei Strings auf ihre lexikographische Reihenfolge überprüft werden:
```julia; term=true
"apple" ≤ "banana"
"apple" > "banana"
"apple" > "Banana"
```
Dabei ist zu beachten, dass Großbuchstaben immer vor Kleinbuchstaben eingeordnet werden.
Betrachtet man nur Buchstaben des Alphabets, entspricht die lexikographische Ordnung der alphabetischen (`"a" < "b"`).
Werden erweiterte Zeichen des Unicodestandards verwendet, erfolgt der Vergleich anhand einer vordefinierten Tabelle.

Alle Ausdrücke, die eine Zahl vom Typ `Bool` zurückgeben, können mit den logischen Operatoren `&&` (*and*), `||` (*or*) und `!` (*not*) kombiniert werden.
```julia; term=true
s = "melon";
s > "banana" && length(s) == 6  # Beide Bedingungen müssen true ergeben
s > "banana" || length(s) == 6  # Mindestens eine Bedingung muss true ergeben
!(s > "banana" && length(s) == 6)  # Beide Bedingungen müssen false ergeben
```
Bei `&&` müssen beide Ausdrücke vor und nach dem Operator `true` ergeben, damit der gesamte Ausdruck `true` ist.
Damit der Ausdruck mit `||` erfüllt ist und `true` ergibt, muss lediglich einer der beiden Ausdrücke erfüllt sein.
`!` kehrt den darauffolgenden logischen Wert um.

Wie bei den arithmetischen Operationen wird auch bei logischen Operatoren eine definierte Reihenfolge eingehalten.
Zuerst werden alle vergleichenden Operatoren ausgewertet (`==`, `!=`, `≠`, `>`, `<`, `>=`, `<=`, `≥`, `≤`), danach die Operatoren `&&` und `||`.
Vergleichende Operatoren können aneinandergekettet werden.
Das Ergebnis der Aneinanderkettung von Vergleichen ist gleich dem Ergebnis von mit `&&` ausgewerteten Vergleichen:
```julia; term=true
a = 1; b = 1; c = 2;
a == b < c > a
a == b && b < c && c > a
```
